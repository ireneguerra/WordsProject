
name: Execute Terraform and Java Classes with Tests

on:
  workflow_dispatch:
    inputs:
      AWS_ACCESS_KEY_ID:
        description: "AWS Access Key ID"
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: "AWS Secret Access Key"
        required: true
      AWS_SESSION_TOKEN:
        description: "AWS Session Token"
        required: true

jobs:
  execute-workflow:
    runs-on: windows-latest

    steps:
    # 1. Clonar el Repositorio
    - name: Checkout Code
      uses: actions/checkout@v3

    # 2. Configurar JDK 11
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven

    # 3. Instalar Terraform
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.7

    # 4. Configurar Credenciales AWS
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ github.event.inputs.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ github.event.inputs.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ github.event.inputs.AWS_SESSION_TOKEN }}
        aws-region: us-east-1

    # 5. Configurar el perfil AWS 'default' para que el código Java lo use
    - name: Configure AWS Default Profile
      run: |
        mkdir -p ~/.aws
        echo "[default]" > ~/.aws/credentials
        echo "aws_access_key_id=${{ github.event.inputs.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
        echo "aws_secret_access_key=${{ github.event.inputs.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
        echo "aws_session_token=${{ github.event.inputs.AWS_SESSION_TOKEN }}" >> ~/.aws/credentials

    # 6. Ejecutar Terraform en la carpeta "terraforms"
    # 6. Ejecutar Terraform en la carpeta "terraforms"
    - name: Terraform Init
      working-directory: terraforms
      run: terraform init

    - name: Terraform Validate
      working-directory: terraforms
      run: terraform validate

    - name: Terraform Plan
      working-directory: terraforms
      run: terraform plan -input=false -refresh=true

    - name: Terraform Apply
      working-directory: terraforms
      env:
        TF_LOG: DEBUG
      run: terraform apply -input=false -auto-approve -refresh=true


    # 7. Ejecutar módulos Java con pruebas

    # BookCrawler Module
    - name: Install BookCrawler Java Module
      working-directory: BookCrawler
      run: mvn clean install
    
    - name: Run Tests for BookCrawler Module
      working-directory: BookCrawler
      run: mvn test

    - name: Execute BookCrawler Java Module
      working-directory: BookCrawler
      run: mvn exec:java "-Dexec.mainClass=org.example.Main" -X

    # WordCounterDatamart Module
    - name: Install WordCounterDatamart Java Module
      working-directory: WordCounterDatamart
      run: mvn clean install

    - name: Run Tests for WordCounterDatamart Module
      working-directory: WordCounterDatamart
      run: mvn test

    - name: Execute WordCounterDatamart Java Module
      working-directory: WordCounterDatamart
      run: mvn exec:java "-Dexec.mainClass=org.example.Main" -X

    # WordsGraph Module
    - name: Install WordsGraph Java Module
      working-directory: WordsGraph
      run: mvn clean install

    - name: Run Tests for WordsGraph Module
      working-directory: WordsGraph
      run: mvn test

    - name: Execute WordsGraph Java Module
      working-directory: WordsGraph
      run: mvn exec:java "-Dexec.mainClass=org.example.Main" -X

    # APIGraph Module
    - name: Install APIGraph Java Module
      working-directory: APIGraph
      run: mvn clean install

    - name: Execute APIGraph Java Module with Timer (non-failing)
      run: |
        powershell -Command "& {
          # Iniciar el proceso y obtener el objeto en $process
          $process = Start-Process 'mvn' 'exec:java -Dexec.mainClass=org.example.Main -X' -PassThru
    
          # Esperar 60 segundos
          Start-Sleep -Seconds 60
    
          # Si el proceso YA terminó, mostramos mensaje de éxito
          if ($process.HasExited) {
            Write-Output 'API Module completed within 60 seconds.'
          }
          else {
            # Si sigue vivo, lo detenemos y seguimos sin marcar error
            Stop-Process -Id $process.Id -Force
            Write-Output 'API Module timed out after 60 seconds (but continuing).'
          }
        }"





